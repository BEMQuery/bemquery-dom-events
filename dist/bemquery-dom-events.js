/*! bemquery-dom-events v0.1.5 | (c) 2016-2017 BEMQuery team | MIT license (see LICENSE) */import{BEMQuery}from'bemquery-core';class ListenersStorage{constructor(){this.storage=new WeakMap}add(a,b,c,d,e){let f={};this.storage.has(a)&&(f=this.storage.get(a)),'undefined'==typeof f[b]&&(f[b]={}),'undefined'==typeof f[b][c]&&(f[b][c]=[]),f[b][c].push([d,e]),this.storage.set(a,f)}get(a,b,c,d){if(!this.storage.has(a))return null;const e=this.storage.get(a);if('undefined'==typeof e[b]||'undefined'==typeof e[b][c])return null;for(let f of e[b][c])if(f[0]===d)return f[1];return null}remove(a,b,c,d){if(!this.storage.has(a))return null;const e=this.storage.get(a);return'undefined'==typeof e[b]||'undefined'==typeof e[b][c]?null:(e[b][c].forEach((f,g)=>{f[0]===d&&e[b][c].splice(g,1)}),null)}}const storage=new ListenersStorage;BEMQuery.prototype.on=function(a,b,c){let d;if('string'!=typeof a||!a)throw new TypeError('Type of event must be a non-empty string.');if('string'!=typeof b&&'function'!=typeof b||!b)throw new TypeError('Selector must be a non-empty string or function.');if('string'==typeof b){if('function'!=typeof c)throw new TypeError('Callback must be a function.');b=this.converter.convert(b).CSS,b=`${b}, ${b} *`,d=e=>{e.target.matches(b)&&c(e)}}else d=b;return this.elements.forEach(e=>{e.addEventListener(a,d,!1),'string'==typeof b&&storage.add(e,a,b,c,d)}),this},BEMQuery.prototype.off=function(a,b,c){let d;if('string'!=typeof a||!a)throw new TypeError('Type of event must be a non-empty string.');if('string'!=typeof b&&'function'!=typeof b||!b)throw new TypeError('Selector must be a non-empty string or function.');if('string'==typeof b){if('function'!=typeof c)throw new TypeError('Callback must be a function.');b=this.converter.convert(b).CSS,b=`${b}, ${b} *`}else d=b;return this.elements.forEach(e=>{'string'==typeof b&&(d=storage.get(e,a,b,c),storage.remove(e,a,b,c)),e.removeEventListener(a,d,!1)}),this};
//# sourceMappingURL=bemquery-dom-events.js.map
